#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "TBICONN.CH"
#include 'parmtype.ch'
#include 'topconn.ch'

/*/{Protheus.doc} User Function CTFAT05WK
    (long_description)
    @type  Function
    @author user
    @since 19/06/2020
    @version version
	
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    @example
    (examples)
    @see (links_or_references)
    /*/
User Function CTFAT05WK( nRegSC6,nQtdaLib,nQtdALib2,lAvCred,lAvEst,_cFil)
Local aArea    	  
Local aAreaSA1 	  
Local aAreaSF4 	  
Local aAreaSC5 	  
Local aAreaSC6 	  
Local nQtdLib  	  
Local nQtdLib2 	  
Local lContinua	  
Local lIntACD  	  
Local cAliasOSep  
Local aLinLogMsg  
Local lLibItPrev  
Local lIFatDpr
Local lLibPar	
Local aEmpenho
Local bBlock
Local aEmpPronto
Local lTrocaLot
Local lGeraDCF
Local nVlrCred

DEFAULT lCredito   := .T.
DEFAULT lEstoque   := .T.
DEFAULT lAvCred    := .T.
DEFAULT lAvEst     := .T.
DEFAULT lGeraDCF   := .T.
DEFAULT lLogMsg    := .F.
DEFAULT lOrdSepLib := .F.

Private cBlCred   := ""

RPCSetType(3)  //Nao consome licenças
PREPARE ENVIRONMENT EMPRESA "01" FILIAL _cFil

aArea    	    := GetArea("SC6")
aAreaSA1 	    := SA1->(GetArea())
aAreaSF4 	    := SF4->(GetArea())
aAreaSC5 	    := {}
aAreaSC6 	    := {}
nQtdLib  	    := nQtdALib
nQtdLib2 	    := 0
lContinua	    := .T.
lIntACD  	    := SuperGetMV("MV_INTACD",.F.,"0") == "1"
cAliasOSep    	:= ""
aLinLogMsg    	:= {}
lLibItPrev    	:= SuperGetMV( 'MV_FATLBPR', .F., .T. )	//Indica se permite a libera?o de Itens previstos do Pedido de Venda
lLibPar 		:= .F.
lTrfLocal		:= .F.
aEmpenho		:= Nil
bBlock			:= Nil
aEmpPronto		:= Nil
lTrocaLot		:= Nil
lGeraDCF		:= Nil
nVlrCred		:= Nil
nQtdlib2		:= 0

//????????????????????????????????
//?Integracao SIGAFAT e SIGADPR                                 ?
//????????????????????????????????
lIFatDpr	 := SuperGetMV("MV_IFATDPR",.F.,.F.)

//??????????????????????
//?erificar se o Pedido ja possui liberacao ?
//??????????????????????
If lIntACD .And. IsInCallStack("MATA455")
	cAliasOSep := GetNextAlias()
	
	BeginSQL Alias cAliasOSep
		SELECT 
			C9_ORDSEP ORD_SEP_ABERTA	
		FROM
			%table:SC9%
		WHERE
			C9_FILIAL  =  %xFilial:SBF%                     AND
			C9_PEDIDO  =  %Exp:SC9->C9_PEDIDO%              AND
			C9_ITEM    =  %Exp:SC9->C9_ITEM%                AND
			C9_ORDSEP  <> %Exp:Space(Len(SC9->C9_ORDSEP))%  AND
			C9_NFISCAL =  %Exp:Space(Len(SC9->C9_NFISCAL))% AND
			%notDel%
	EndSQL
	
	If (!(cAliasOSep)->(EOF()))
		// Encontrou ordem de separacao aberta e nao faturada para o item que esta bloqueado
		lOrdSepLib := .T.
	Else
		lOrdSepLib := .F.
	EndIf
	
	If (lOrdSepLib .And. lLogMsg)	
		If (aScan(aLogMsg, {|x| x[1] == SC9->C9_ITEM    .And. ; 
		                        x[2] == SC9->C9_PRODUTO .And. ;
		                        x[3] == SC9->C9_SEQUEN        ;
		                    }                                 ;
		          ) == 0)
		          
		    While (!(cAliasOSep)->(EOF()))
				aLinLogMsg := { SC9->C9_ITEM,                                         ; // 01 - Item do Pedido de Venda
				                SC9->C9_PRODUTO,                                      ; // 02 - Codigo do Produto
				                SC9->C9_SEQUEN,                                       ; // 03 - Sequencia de liberacao do item do pedido de venda 
				                SC9->C9_QTDLIB,                                       ; // 04 - Quantidade a ser liberada
				                "Este item nao podera ser liberado pois existe a Ordem de Separacao " +                                             ; // #Este item nao poder?ser liberado pois existe a Ordem de Separa?o 
				                "'" + AllTrim((cAliasOSep)->ORD_SEP_ABERTA) + "' " +  ;
				                aberta,                                	          ; // 05 - Mensagem de inconsitencia #aberta
				                .F.                                                   ; // 06 - Indica se a linha foi deletada ou nao (.T.=Deletado, .F.=Nao Deletado)
				               }
				MaSetFaLog(aLinLogMsg)
				
				(cAliasOSep)->(DbSkip())
			EndDo
			
		EndIf
	EndIf
	
	(cAliasOSep)->(DbCloseArea())
EndIf
CONOUT("TESTE1111111 - SC6->C6_NUM: " + SC6->C6_NUM)
//?????????????????????????????????????
//?osiciona Pedido                                                        ?
//?????????????????????????????????????
If Empty(SC6->C6_BLOQUEI) .And. AllTrim(SC6->C6_BLQ)<>"R" .And. !(lOrdSepLib)

	dbSelectArea("SC6")
	If nRegSC6<>0
		aAreaSC6 := GetArea()
		MsGoto(nRegSC6)
	Else
		aAreaSC6 := GetArea("SC6")
	EndIf

	If SB1->B1_FILIAL+SB1->B1_COD <> xFilial('SB1')+SC6->C6_PRODUTO
		SB1->(DbSetOrder(1))
		SB1->(MsSeek(xFilial('SB1')+SC6->C6_PRODUTO))
	Endif
	dbSelectArea("SC5")
	dbSetOrder(1)
	MsSeek(xFilial("SC5")+SC6->C6_NUM)

	//?????????????????????????????????????
	//?ntegracao com EEC													   ?
	//?uncao: AvChkStDesp()												   ?
	//?arametros: Nro do pedido de venda. 									   ?
	//?etorno: True  - O pedido de venda podera ser liberado visto que as 	   ?
	//?				despesas ja foram integradas.						   ?
	//?        False - O pedido de venda n? poder?ser liberado visto que    ?
	//?				existem pendencias para as despesas.				   ?
	//?????????????????????????????????????
	If !Empty(SC5->C5_PEDEXP)
		If FindFunction("AvChkStDesp")
			If !AvChkStDesp(SC5->C5_NUM)
				lContinua := .F.
			EndIf
		EndIf
	EndIf

	//------------------------------------------------------------------------------
	// Verifica o tipo de opera?o (C6_TPOP) antes de liberar. Itens previstos n?
	// podem ser liberados a menos que o par?etro MV_FATLBPR esteja como .T.
	// Altera?o realizada para atender o requisito de Programa?o de Entrega.
	//------------------------------------------------------------------------------
	If ( SC6->C6_TPOP == "P" ) .And. ( !lLibItPrev )
		lContinua := .F.
	EndIf

	//????????????????????????????????????
	//?M_SER004_CRM019_Integra?o_Faturamento_DPR                           ?
	//?Se o item eh do tipo "Desenvolvimento" nao libera para faturamento   ?
	//?Autor: Thiago Tavares													   ?
	//?Data: 25/10/2013															   ?
	//????????????????????????????????????
	If lIFatDpr
		If SC6->C6_TPPROD == "2"
			lContinua := .F.
		EndIf
	EndIf

	If lContinua
        CONOUT("TESTE2222222 - SC5 ANTES" + SC6->C6_NUM)
		RecLock("SC5",.F.)
		CONOUT("TESTE2222222 - SC5 OK " + SC6->C6_NUM)
		//If nRegSC6 == 0 //.Or. ( RecLock("SC5",.F.) )
			If Empty(SC5->C5_BLQ)
				If nQtdALib2 == 0 .And. SC6->C6_UNSVEN <> 0
					nQtdALib2 := SB1->(ConvUm(SC6->C6_PRODUTO,nQtdALib,Nil,2))
					If nQtdALib2 == 0
						If SC6->C6_QTDVEN-SC6->C6_QTDEMP-SC6->C6_QTDENT-nQtdALib==0
							nQtdALib2 := SC6->C6_UNSVEN-SC6->C6_QTDEMP2-SC6->C6_QTDENT2
						Else
							nQtdALib2 := nQtdALib*SC6->C6_UNSVEN/SC6->C6_QTDVEN
						EndIf
					EndIf
                    CONOUT("TESTE33333333 - SC6->C6_NUM: " + SC6->C6_NUM)
                    If RecLock("SC6",.F.)
					    SC6->C6_QTDLIB2:= nQtdALib2
                        SC6->(MsUnlock())
                    EndIf 
					nQtdALib2 := SC6->C6_QTDLIB2
				EndIf
                CONOUT("TESTE44444444 - SC6->C6_NUM: " + SC6->C6_NUM)
                If RecLock("SC6",.F.)
                    SC6->C6_QTDLIB := nQtdALib
                    SC6->C6_QTDLIB2:= nQtdALib2
                    SC6->(MsUnlock())
                EndIf 
				FatAtuEmpN("-")
				nQtdLib := a440GeraC9(@nQtdLib,@lCredito,@lEstoque,lAvCred,lAvEst,lLibPar,lTrfLocal,@aEmpenho,bBlock,aEmpPronto,lTrocaLot,lGeraDCF,@nVlrCred,@nQtdlib2)
				FatAtuEmpN("+")
			EndIf
		//EndIf
	Else
		nQtdLib := 0
	EndIf
	
Else
	nQtdLib := 0
Endif

//?????????????????????????????????????
//?estaura a Entrada                                                      ?
//?????????????????????????????????????
RestArea(aAreaSA1)
RestArea(aAreaSF4)
RestArea(aArea)
Return(cBlCred)

Static Function a440GeraC9(nQtdLib,lCredito,lEstoque,lAvCred,lAvEst,lLiber,lTransf,aEmpenho,;
							bBlock,aEmpPronto,lTrocaLot,lGeraDCF,nVlrCred,nQtdLib2)

Local aArea     := GetArea(Alias())
Local aAreaSA1  := SA1->(GetArea())
Local aAreaSB2  := SB2->(GetArea())
Local aAreaSF4  := SF4->(GetArea())
Local aSaldos   := {}
Local aLocal    := {}

Local nSldSB6   := 0
Local cBlEst    := ""
Local cAliasSB6 := "SB6"
Local lQuery    := .F.

Local lBlqCrd   := GetMv("MV_BLQCRED")
Local lTravas   := .T.

Local nQtdJaLib := 0
Local nQtdPoder3:= 0
Local nQtdNPT   := 0
Local nQtdNosso := 0
Local lMTValAvC := ExistBlock("MTVALAVC")
Local	nValAv	 := 0
Local aEmpBN	:= If(FindFunction("A410CarBen"),A410CarBen(SC6->C6_NUM,SC6->C6_ITEM),{})
Local nX        := 0
Local nMvTipCrd 	:= SuperGetMV("MV_TIPACRD", .F., 1)
Local cMvLibNodp	:= GetMv("MV_LIBNODP")
Local nVlrTitAbe	:= 0
Local nVlrTitAtr	:= 0
Local cQuery    := ""

//?????????????????????????????????????
//?justa a Entrada da Rotina                                              ?
//?????????????????????????????????????
DEFAULT lAvCred  := .T.
DEFAULT lAvEst   := .T.
DEFAULT lLiber   := .F.
DEFAULT lTransf  := .F.
DEFAULT lGeraDCF := .T.

If ( At(SC5->C5_TIPO,"CIP") > 0 )
	lLiber := .F.
EndIf
dbSelectArea("SF4")
dbSetOrder(1)
MsSeek(xFilial("SF4")+SC6->C6_TES)

//?????????????????????????????????????
//?osiciona Registros                                                     ?
//?????????????????????????????????????
If ( At(SC5->C5_TIPO,"DB") == 0 .And. (SF4->F4_DUPLIC=='S' .Or. cMvLibNodp == "S"))
	dbSelectArea("SA1")
	dbSetOrder(1)
	MsSeek(xFilial("SA1")+SC6->C6_CLI+SC6->C6_LOJA)
	lTravas := RecLock("SA1")
EndIf

dbSelectArea("SB2")
dbSetOrder(1)
If ( MsSeek(xFilial("SB2")+SC6->C6_PRODUTO+SC6->C6_LOCAL) .And. lTravas )
	lTravas := RecLock("SB2")
EndIf
//?????????????????????????????????????
//?erifica se o SB2 e o SA1 estao Travados                                ?
//?????????????????????????????????????
If ( lTravas )
	//?????????????????????????????????????
	//?omplementos nao devem ter o Credito ou Estoque Avaliado.               ?
	//?evolucao de Poder de Terceiro nao deve ter o Credito avaliado.         ?
	//?????????????????????????????????????
	If ( AT(SC5->C5_TIPO,"CIP") > 0 .Or. ( SF4->F4_PODER3 == "D" .And. SF4->F4_ESTOQUE=="N") .Or. MaTesSel(SF4->F4_CODIGO) )
		lEstoque := .T.
		lCredito := .T.
	Else
		//?????????????????????????????????????
		//?valiacao de Estoque                                                    ?
		//?????????????????????????????????????
		If ( lAvEst )
			//?????????????????????????????????????
			//?omente avalia-se estoque quando ha movimentacao e nao ha reserva       ?
			//?????????????????????????????????????
			If ( SF4->F4_ESTOQUE == "S" .And. (Empty(SC6->C6_RESERVA) .OR. (Iif(ExistFunc("LjxValEst"), LjxValEst(SC5->C5_ORCRES), .F. ) .AND. !AtIsRotina("MATA455"))))
				If SuperGetMV("MV_AVALEST")==3 .And. !AtIsRotina("MATA455")
					If !((Rastro(SC6->C6_PRODUTO) .Or. Localiza(SC6->C6_PRODUTO,.T.)) .And. SuperGetMv("MV_GERABLQ")=="N")
						lEstoque := .F.
						For nX := 1 To Len( aEmpBN )
							A410LibBen(1,aEmpBN[nX,1],aEmpBN[nX,2],SC6->C6_QTDVEN,SC6->C6_UNSVEN)
						Next
					Else
						lEstoque := A440VerSB2(@nQtdLib,lLiber,lTransf,@aLocal,@aEmpenho)
					EndIf
				Else
					lEstoque := A440VerSB2(@nQtdLib,lLiber,lTransf,@aLocal,@aEmpenho)
				EndIf
			Else
				If ( !Empty(SC6->C6_RESERVA) )
					lEstoque := .T.

					If cPaisLoc<>"BRA" .AND. SC6->C6_QTDRESE == 0
						nQtdLib := Min(SC6->C6_QTDVEN,nQtdLib)
					Else
						nQtdLib := Min(SC6->C6_QTDRESE,nQtdLib)
					EndIf

				Else
					lEstoque := .T.
				EndIf
			EndIf
		EndIf
		//?????????????????????????????????????
		//?valiacao de Credito                                                    ?
		//?????????????????????????????????????
		If ( lAvCred )
			If ( !SC5->C5_TIPO $ "DB" )
				If ( SF4->F4_DUPLIC == "S" .Or. cMvLibNodp == "S" )
					If ( lBlqCrd .And. !lEstoque )
						lCredito := .F.
						cBlCred  := "02"
					Else
						If lMTValAvC
							nValAv	:=	ExecBLock("MTValAvC",.F.,.F.,{'A440GERAC9',SC6->C6_PRCVEN*nQtdLib,Nil})
						Else
							nValAv	:=	SC6->C6_PRCVEN*nQtdLib
						Endif
						//A variavel nValItPed (Private) he criada nas funcoes:(A440Grava, A410Grava e a440Proces)
						If nMvTipCrd == 2 .AND. FindFunction("FatCredTools") .AND. Type("nValItPed") <> "U"

							If nValItPed == 0
								//Consulta os titulos em aberto
								nVlrTitAbe := SldCliente(SC9->C9_CLIENTE + SC9->C9_LOJA, Nil, Nil, .F.)
								//Consulta os titulos em atraso
								nVlrTitAtr := CrdXTitAtr(SC9->C9_CLIENTE + SC9->C9_LOJA, Nil, Nil, .F.)
							EndIf

							nValItPed += nValAv

							LJMsgRun("Aguarde..",,{|| lCredito := FatCredTools(SA1->A1_COD,SA1->A1_LOJA, nValItPed, nVlrTitAbe, nVlrTitAtr)})//"Aguarde... Efetuando Analise de Cr?ito."
							//lCredito := FatCredTools(SA1->A1_COD,SA1->A1_LOJA, nValItPed, nVlrTitAbe, nVlrTitAtr)
						Else
							lCredito := MaAvalCred(SA1->A1_COD,SA1->A1_LOJA,nValAV,SC5->C5_MOEDA,.T.,@cBlCred,@aEmpenho,@nVlrCred)
						EndIf
					EndIf
				Else
					lCredito := .T.
				EndIf
			Else
				lCredito := .T.
			EndIf
		EndIf
	EndIf
EndIf

//Para Orcamento com origem do SigaLoja verifica regra de bloqueio de cr?ito especifica
If (! Empty(SC5->C5_ORCRES) .Or. ! Empty(SC5->C5_PEDECOM)) 
	If ExistFunc("LjxjPedBlq")
		LjxjPedBlq( SC5->C5_ORCRES , @cBlCred , @lCredito)
	ElseIf SuperGetMV("MV_LJECOMM",,.F.) .And. SuperGetMV("MV_LJECOMO",,.F.) .And. Val(SC5->C5_PEDECOM) > 0
		cBlCred  := "02"
		lCredito := .F.
	EndIf	
EndIf

//?????????????????????????????????????
//?este momento eh gerado os empenhos e o SC9 dependendo do caso          ?
//?????????????????????????????????????
If ( lTravas .And. (SC5->C5_TIPO$"CIP" .Or. nQtdLib > 0 .Or. MaTesSel(SF4->F4_CODIGO)) )
	//????????????????????????????????????
	//?usca dados ref. ao Beneficiamento no SB6 para gerar Registros no SC9 ?
	//????????????????????????????????????
	If ( SF4->F4_PODER3=='D' .And. !(SC5->C5_TIPO$"CIPD") )
		nQtdPoder3 := nQtdLib
	Else
		If lCredito .And. lEstoque
			aSaldos := MaNeedP3(nQtdLib)
			nQtdNosso := aSaldos[1]
			nQtdPoder3:= aSaldos[2]
			nQtdNPT   := aSaldos[3]
		Else
			nQtdNosso := nQtdLib
		EndIf
	EndIf
	//?????????????????????????????????????
	//?erifica os codigos de bloqueio                                         ?
	//?????????????????????????????????????
	If ( Empty(cBlCred) )
		If ( !lCredito )
			If At(SC5->C5_TIPO,"DB") == 0 .And. SF4->F4_DUPLIC == 'S' .And. SC5->C5_TIPLIB == "2" .And.;
				( !Empty(SA1->A1_VENCLC) .And. SA1->A1_VENCLC < dDataBase ) .And. nVlrCred <= 0
				cBlCred := "04"		//Vencimento do Limite de Credito
			Else
				cBlCred := "01"
			EndIf
		EndIf
	EndIf
	If ( Empty(cBlEst) )
		If ( !lEstoque )
			cBlEst := "02"
		EndIf
	EndIf
	//?????????????????????????????????????
	//?ratamento da quantidade a ser liberada do poder de terceiros           ?
	//?????????????????????????????????????
	If nQtdPoder3 > 0
		//??????????????????????????????????
		//?osiciona Registros                                              ?
		//??????????????????????????????????
		dbSelectArea("SB6")
		If Empty(SC6->C6_IDENTB6)
			dbSetOrder(1)
		Else
			dbSetOrder(3)
		EndIf
		cAliasSB6 := "A440GERAC9"
		lQuery    := .T.
		aStruSB6  := SB6->(dbStruct())
		SB6->(dbCommit())

		cQuery := "SELECT B6_FILIAL,B6_CLIFOR,B6_LOJA,B6_IDENT,B6_PRODUTO,"
		cQuery += "B6_QULIB,B6_SALDO "
		cQuery += "FROM "+RetSqlName("SB6")+" SB6 "
		cQuery += "WHERE SB6.B6_FILIAL='"+xFilial("SB6")+"' AND "
		cQuery += "SB6.B6_PRODUTO='"+SC6->C6_PRODUTO+"' AND "
		If !Empty(SC6->C6_IDENTB6)
			cQuery += "SB6.B6_IDENT='"+SC6->C6_IDENTB6+"' AND "
		EndIf
		cQuery += "(SB6.B6_SALDO-SB6.B6_QULIB)>0 AND "
		cQuery += "SB6.D_E_L_E_T_=' ' "
		cQuery += "ORDER BY "+SqlOrder(SB6->(IndexKey()))

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSB6,.T.,.T.)
		For nX := 1 To Len(aStruSB6)
			If aStruSB6[nX][2] <> "C" 
				TcSetField(cAliasSB6,aStruSB6[nX][1],aStruSB6[nX][2],aStruSB6[nX][3],aStruSB6[nX][4])
			EndIf
		Next nX
		
		While (!Eof() .And.  xFilial("SB6") == (cAliasSB6)->B6_FILIAL .And.;
				IIf(Empty(SC6->C6_IDENTB6),.T.,;
				SC6->C6_IDENTB6==(cAliasSB6)->B6_IDENT) .And.;
				SC6->C6_PRODUTO==(cAliasSB6)->B6_PRODUTO .And.;
				nQtdPoder3 > 0 )
			nSldSB6 := ( (cAliasSB6)->B6_SALDO - (cAliasSB6)->B6_QULIB )
			If ( nSldSB6 > 0 )
				nSldSb6 := Min(nSldSB6,nQtdPoder3)
				If !( ( Rastro(SC6->C6_PRODUTO).Or.Localiza(SC6->C6_PRODUTO,.T.) ) .And.;
						SuperGetMv("MV_GERABLQ")=="N" .And. !lEstoque )
					MaGravaSc9(nSldSb6,cBlCred,cBlEst,@aLocal,@aEmpenho,(cAliasSB6)->B6_IDENT,bBlock,aEmpPronto,nQtdLib2,@nVlrCred)
					nQtdJaLib += nSldSb6
				EndIf
				nQtdPoder3 -= nSldSB6
			EndIf
			dbSelectArea(cAliasSB6)
			dbSkip()
		EndDo
		If lQuery
			dbSelectArea(cAliasSB6)
			dbCloseArea()
			dbSelectArea("SB6")
		EndIf
	EndIf
	//?????????????????????????????????????
	//?ratamento da quantidade a ser liberada - Nossa em Terceiros            ?
	//?????????????????????????????????????
	If nQtdNPT > 0
		//?????????????????????????????????????
		//?erificacao do Parametro MV_GERABLQ                                     ?
		//?????????????????????????????????????
		If !( (Rastro(SC6->C6_PRODUTO) .Or. Localiza(SC6->C6_PRODUTO,.T.)) .And.;
				SuperGetMv("MV_GERABLQ")=="N" .And. !lEstoque )
			MaGravaSc9(nQtdNPT,cBlCred,cBlEst,@aLocal,@aEmpenho,,bBlock,aEmpPronto,,@nVlrCred)
			nQtdJaLib += nQtdNPT
		EndIf
	EndIf
	//?????????????????????????????????????
	//?ratamento da quantidade a ser liberada - Nosso Poder                   ?
	//?????????????????????????????????????

	If nQtdNosso > 0 .Or. MaTesSel(SF4->F4_CODIGO)	.Or. Ma440Compl()
		//?????????????????????????????????????
		//?erificacao do Parametro MV_GERABLQ                                     ?
		//?????????????????????????????????????
		If !( (Rastro(SC6->C6_PRODUTO) .Or. Localiza(SC6->C6_PRODUTO,.T.)) .And.;
				SuperGetMv("MV_GERABLQ")=="N" .And. !lEstoque )
			MaGravaSc9(nQtdNosso,cBlCred,cBlEst,@aLocal,@aEmpenho,,bBlock,aEmpPronto,nQtdLib2,@nVlrCred,,lGeraDCF)
			nQtdJaLib += nQtdNosso
		EndIf
		//?????????????????????????????????????
		//?erificacao do Parametro MV_GRVBLQ2                                     ?
		//?????????????????????????????????????
		If ( SuperGetMv("MV_GRVBLQ2" ) .And. aEmpenho == Nil )
			If ( nQtdLib <> SC6->C6_QTDLIB ) .OR. ( SC6->C6_QTDLIB <> 0 )
				nQtdLib := SC6->C6_QTDLIB
				If ( nQtdLib <> 0 )
					If !lCredito
						lAvEst := .F.
						lEstoque := .F.
					Else
						lAvEst := .T.
					EndIf
					nQtdJaLib += a440GeraC9(nQtdLib,lCredito,lEstoque,lAvCred,lAvEst,lLiber,lTransf,@aEmpenho,bBlock,aEmpPronto,lTrocaLot,lGeraDCF,@nVlrCred)
				EndIf
			EndIf
		EndIf
	EndIf
EndIf
If ( lTravas )
	//?????????????????????????????????????
	//?tualiza a quantidade liberada para zero                                ?
	//?????????????????????????????????????
	If ( aEmpenho == Nil )
		SC6->C6_QTDLIB  := 0
		SC6->C6_QTDLIB2 := 0
	EndIf
EndIf
If ( !lTravas )
	lCredito := .F.
	lEstoque := .F.
	nQtdLib  := 0
EndIf
RestArea(aAreaSA1)
RestArea(aAreaSB2)
RestArea(aAreaSF4)
RestArea(aArea)
Return(nQtdJaLib)

Static Function MaGravaSC9(nQtdLib,cBlqCred,cBlqEst,aLocal,aEmpenho,cIdentB6,bBlock,aEmpPronto,nQtdLib2,nVlrCred,cBlqWMS,lGeraDCF)

Static lMA440GrLt
Static cTiposLC

Local aArea    	:= GetArea(Alias())
Local aAreaSA1 	:= SA1->(GetArea())
Local aAreaSB2 	:= SB2->(GetArea())
Local aAreaSF4 	:= SF4->(GetArea())
Local aAreaSB1 	:= SB1->(GetArea())
Local aAuxiliar := {}
Local aLocaliz  := {}
Local aSaldos   := {}
Local nX        := 0
Local nY        := 0
Local nAuxiliar := 0
Local nQtdRese  := 0
Local nMCusto   := 0
Local nSaveSX8  := GetSX8Len()
Local nRegEmp   := 0
Local cQuery    := ""
Local cNameQry  := ""
Local cSeqSC9   := "00"
Local cReserva  := ""
Local lAtualiza := If(aEmpenho==Nil,.T.,.F.)
Local lEstoque  := .F.
Local lCredito  := .F.
Local lHasWMS   := IntWms(SC6->C6_PRODUTO) .And. !Empty(SC6->C6_SERVIC) //-- Soh considera o uso do WMS se houver Servico Preenchido para o Item do SC6
Local lUsaVenc  := .F.
Local lReserva  := .F.
Local lEmpenha  := .F.
Local lResEst   := SuperGetMv("MV_RESEST")
Local lIntACD	:= SuperGetMV("MV_INTACD",.F.,"0") == "1"
Local lACDSer   := SuperGetMV("MV_SUBNSER",.F.,'1') $ '2|3'
Local dValidLote:= Ctod( "" )
Local nRecSC9   := 0
Local nPrcVen   := 0
Local nTotSC9   := 0
Local nTotSC9Aux := 0
Local nDecimal   := TamSx3("C9_PRCVEN")[2]
//?????????????????
//?ratamento para e-Commerce      ?
//?????????????????
Local lECommerce := SuperGetMV("MV_LJECOMM",,.F.)
Local lRetWmsPE := lHasWMS
Local lWmsNew    := SuperGetMV("MV_WMSNEW",.F.,.F.)

   //Este ponto de entrada ?utilizado pelo Nestl?para simular uma integra?o com o WMS
   //Deve obrigatoriamente ficar neste ponto antes do DEAFAULT para for?r um bloqueio de WMS no pedido
   If ExistBlock("MA440WMS")
      lRetWmsPE := ExecBlock("MA440WMS",.F.,.F.,{lHasWMS})
      lHasWMS   := Iif(ValType(lRetWmsPE)=="L",lRetWmsPE,lHasWMS)
	  cBlqWms   := Iif(lHasWMS,"01","")
   EndIf

DEFAULT cBlqWms    := Iif(lHasWMS,Iif(IsInCallStack("MaDelNFS"),"05","01"),"")
DEFAULT cIdentB6   := ""
DEFAULT lMA440GrLt := ExistBlock("MA440GRLT")
DEFAULT aEmpPronto := {}
DEFAULT cTiposLC   := GetSESTipos({ || ES_SALDUP == "2"},"1")
DEFAULT lGeraDCF   := .T.

If cPaisLoc == "PAR" .And. SC5->C5_TIPLIB=="2" .And. ValType(aEmpenho) == "A" .And. Len(aEmpenho[1]) == 0
	lAtualiza := .T.
EndIf

//?????????????????????????????????????
//?Configura a reserva de estoque quando for e-Commerce                   ?
//?????????????????????????????????????
If  lECommerce .AND. !( Empty(SC5->C5_ORCRES) ) .AND. (Posicione("SL1",1,xFilial("SL1")+SC5->C5_ORCRES,"L1_ECFLAG")=="1")
	lResEst := .T.
EndIf

//?????????????????????????????????????
//?osiciona Registros                                                     ?
//?????????????????????????????????????
dbSelectArea("SF4")
dbSetOrder(1)
MsSeek(xFilial("SF4")+SC6->C6_TES)
//?????????????????????????????????????
//?erifica a Sequencia de Liberacao do SC9                                ?
//?????????????????????????????????????

SC9->(dbCommit())
cNameQry := "MAGRAVASC9"

cQuery := "SELECT MAX(C9_SEQUEN) SEQUEN "
cQuery +=   "FROM "+RetSqlName("SC9")+" SC9 "
cQuery +=   "WHERE C9_FILIAL='"+xFilial("SC9")+"' AND "
cQuery +=         "C9_PEDIDO='"+SC6->C6_NUM+"' AND "
cQuery +=         "C9_ITEM='"+SC6->C6_ITEM+"' AND "
cQuery +=         "SC9.D_E_L_E_T_<>'*'"

cQuery := ChangeQuery(cQuery)

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cNameQry,.T.,.T.)
If !Empty(SEQUEN)
	cSeqSC9 := AllTrim(SEQUEN)
EndIf
dbCloseArea()
dbSelectArea("SC9")

cSeqSC9 := Soma1(cSeqSC9,Len(SC9->C9_SEQUEN))

//????????????????????????????
//?Baixa as qtdes transferidas para o local do pedido  ?
//????????????????????????????
If ( lAtualiza )
	For nX :=1 To Len(aLocal)
		MaTrfLocal(SC6->C6_PRODUTO,aLocal[nX][1],SC6->C6_LOCAL,aLocal[nX][2],SC6->C6_NUM,.F.,SC6->C6_ITEM+cSeqSC9)
	Next nX
EndIf

//?????????????????????????????????????
//?nicializa as variaveis                                                 ?
//?????????????????????????????????????
nQtdLib2  := If(nQtdLib2==Nil,SB1->(ConvUm(SC6->C6_PRODUTO,nQtdLib,0,2)),nQtdLib2)
If nQtdLib2 == 0 .And. SC6->C6_UNSVEN <> 0
	If Empty( SC6->C6_QTDVEN-SC6->C6_QTDEMP-SC6->C6_QTDENT-nQtdLib )
		//???????????????????????????????????????
		//?Se baixou toda a quantidade na primeira UM, baixa totalmente a segunda UM ?
		//???????????????????????????????????????
		nQtdLib2 := SC6->C6_UNSVEN-SC6->C6_QTDEMP2-SC6->C6_QTDENT2
	Else
		//?????????????????????????????????????
		//?Se nao, baixa proporcionamenre a quantidade baixada na primeira UM     ?
		//?????????????????????????????????????
		nQtdLib2 := nQtdLib*SC6->C6_UNSVEN/SC6->C6_QTDVEN
	EndIf
	SC6->C6_QTDLIB2:= nQtdLib2
	nQtdLib2 := SC6->C6_QTDLIB2
EndIf
lReserva  := !Empty(SC6->C6_RESERVA)
lEstoque  := Empty(AllTrim(cBlqEst))
lCredito  := Empty(AllTrim(cBlqCred))
If ( SF4->F4_ESTOQUE=="S" .And. nQtdLib > 0 .And. lEstoque .And. (lCredito .Or. lResEst) .And. lAtualiza)
	//?????????????????????????????????????
	//?erifica os novos lotes.                                                ?
	//?????????????????????????????????????
	If !Rastro(SC6->C6_PRODUTO) .And. !Localiza(SC6->C6_PRODUTO,.T.)
		If Len(aEmpPronto) > 0
			aSaldos := ACLONE(aEmpPronto)
			lEmpenha := .T.
		Else
			aSaldos := {{ "","","","",nQtdLib,nQtdLib2,Ctod(""),"","","",SC6->C6_LOCAL,0}}
		EndIf
		aLocaliz := { aSaldos }
	Else
		//?????????????????????????????????????
		//?Ponto de Entrada p/ movimentar estoque antes da selecao Lote X Localiz.?
		//?????????????????????????????????????
		If lMA440GrLt
			ExecBlock("MA440GRLT",.F.,.F.,{SC6->C6_PRODUTO,SC6->C6_LOCAL,nQtdLib,SC6->C6_LOTECTL,SC6->C6_NUMLOTE,SC6->C6_LOCALIZ,SC6->C6_NUMSERI})
		EndIf
		//?????????????????????????????????????
		//?Verifica se devem ser escolhidos Lotes/Sub-Lotes/Localizacao ou nao    ?
		//?????????????????????????????????????
		If Len(aEmpPronto) > 0
			aSaldos := ACLONE(aEmpPronto)
			lEmpenha := .T.
		Else
			lUsaVenc:= If(!Empty(SC6->C6_LOTECTL+SC6->C6_NUMLOTE),.T.,(SuperGetMv('MV_LOTVENC')=='S'))
			If ( !lHasWMS .Or. !Empty(SC6->C6_LOCALIZ+SC6->C6_NUMSERI) ) .And.;
				(!lReserva .Or. (lReserva .And. Rastro(SC6->C6_PRODUTO) .And.;
				(xFilial("SC0")+SC6->C6_RESERVA+SC6->C6_PRODUTO+SC6->C6_LOCAL==SC0->C0_FILIAL+SC0->C0_NUM+SC0->C0_PRODUTO+SC0->C0_LOCAL) .And.;
				Empty(SC0->C0_LOTECTL+SC0->C0_NUMLOTE))) .And.;
				!(lWmsNew .And. IntWms(SC6->C6_PRODUTO))
				If lIntACD .And. lACDSer .And. IsInCallStack("MaDelNFS")
					aSaldos:= ACDCB9Ser(SC6->C6_PRODUTO,SC6->C6_LOCAL,nQtdLib,nQtdLib2,SC6->C6_LOTECTL,SC6->C6_NUMLOTE,SC6->C6_LOCALIZ,SC6->C6_NUMSERI,lUsaVenc,dDataBase,SC9->C9_ORDSEP,SC9->C9_PEDIDO)
				Else
					aSaldos := SldPorLote(SC6->C6_PRODUTO,SC6->C6_LOCAL,nQtdLib,nQtdLib2,SC6->C6_LOTECTL,SC6->C6_NUMLOTE,SC6->C6_LOCALIZ,SC6->C6_NUMSERI,NIL,NIL,NIL,lUsaVenc,nil,nil,dDataBase)
				EndIf
				lEmpenha := .T.
			Else
				SC0->( dbSetOrder(1) )
				If !Empty(SC6->C6_RESERVA) .And.;
					(xFilial("SC0")+SC6->C6_RESERVA+SC6->C6_PRODUTO+SC6->C6_LOCAL==SC0->C0_FILIAL+SC0->C0_NUM+SC0->C0_PRODUTO+SC0->C0_LOCAL .Or. ;
					SC0->( dbSeek( xFilial("SC0")+SC6->C6_RESERVA+SC6->C6_PRODUTO+SC6->C6_LOCAL ) ) )

					//?????????????????????????????????????
					//?Pesquisa a data de validade dos lotes                                  ?
					//?????????????????????????????????????
					If Rastro(SC6->C6_PRODUTO,"L")
						SB8->( dbSetOrder( 3 ) )
						SB8->( MsSeek( xFilial( "SB8" ) + SC0->C0_PRODUTO + SC0->C0_LOCAL + SC0->C0_LOTECTL ) )
						dValidLote := SB8->B8_DTVALID
					ElseIf Rastro(SC6->C6_PRODUTO,"S")
						SB8->( dbSetOrder( 3 ) )
						SB8->( MsSeek( xFilial( "SB8" ) + SC0->C0_PRODUTO + SC0->C0_LOCAL + SC0->C0_LOTECTL + SC0->C0_NUMLOTE ) )
						dValidLote := SB8->B8_DTVALID
					Else
						dValidLote := Ctod( "" )
					EndIf

					aSaldos := {{ SC0->C0_LOTECTL,SC0->C0_NUMLOTE,SC0->C0_LOCALIZ,SC0->C0_NUMSERI,nQtdLib,nQtdLib2,dValidLote,"","","",SC0->C0_LOCAL,0}}
				Else
					If lHasWMS .And. !lReserva
						//?????????????????????????????????????
						//?Pesquisa a data de validade dos lotes                                  ?
						//?????????????????????????????????????
						If Rastro(SC6->C6_PRODUTO,"L")
							SB8->( dbSetOrder( 3 ) )
							SB8->( MsSeek( xFilial( "SB8" ) + SC6->C6_PRODUTO + SC6->C6_LOCAL + SC6->C6_LOTECTL ) )
							dValidLote := SB8->B8_DTVALID
						ElseIf Rastro(SC6->C6_PRODUTO,"S")
							SB8->( dbSetOrder( 3 ) )
							SB8->( MsSeek( xFilial( "SB8" ) + SC6->C6_PRODUTO + SC6->C6_LOCAL + SC6->C6_LOTECTL + SC6->C6_NUMLOTE ) )
							dValidLote := SB8->B8_DTVALID
						Else
							dValidLote := Ctod( "" )
						EndIf
					EndIf

					cReserva := ""
					lReserva := .F.
					aSaldos := {{ SC6->C6_LOTECTL,SC6->C6_NUMLOTE,SC6->C6_LOCALIZ,SC6->C6_NUMSERI,nQtdLib,nQtdLib2,dValidLote,"","","",SC6->C6_LOCAL,0}}
				EndIf
			EndIf
		EndIf
		//?????????????????????????????????????
		//?glutina os lotes/sub-lotes iguais                                      ?
		//?uando ha criacao de reservas na liberacao nao se deve aglutinar as     ?
		//?ocalizacoes fisicas.                                                   ?
		//?????????????????????????????????????
		If ( lCredito .Or. lResEst)
			aAuxiliar := aClone(aSaldos)
			aSaldos   := {}
			For nX := 1 To Len(aAuxiliar)
				nAuxiliar := aScan(aSaldos,{|x|x[1]==aAuxiliar[nX,1] .And.;
					x[2]==aAuxiliar[nX,2] .And.;
					x[11]==aAuxiliar[nX,11] })
				If ( nAuxiliar == 0 )
					AAdd(aSaldos,Array(Len(aAuxiliar[nX])))
					For nY := 1 To Len(aAuxiliar[nX])
						aSaldos[Len(aSaldos)][nY] := aAuxiliar[nX,nY]
					Next nY
					AAdd(aLocaliz,{ aAuxiliar[nX] })
				Else
					//?????????????????????????????????????
					//?uando aglutina os lotes/sub-lotes iguais com localizacoes diferentes,  ?
					//?impa a localizacao fisica do array asaldos                             ?
					//?????????????????????????????????????
					If !( aSaldos[nAuxiliar,3] == aAuxiliar[nX,3] )
						aSaldos[nAuxiliar,3] := ""
					EndIf
					aSaldos[nAuxiliar][5] += aAuxiliar[nX,5]
					aSaldos[nAuxiliar][6] += aAuxiliar[nX,6]
					AAdd(aLocaliz[nAuxiliar],aAuxiliar[nX])
				EndIf
			Next nX
		Else
			aLocaliz:= { aSaldos }
		EndIf
	EndIf
Else
	If Len(aEmpPronto) > 0
		aSaldos := ACLONE(aEmpPronto)
		lEmpenha := .T.
	Else
		aSaldos := {{ "","","","",nQtdLib,nQtdLib2,Ctod(""),"","","",SC6->C6_LOCAL,0}}
	EndIf
	aLocaliz:= { aSaldos }
EndIf
//?????????????????????????????????????
//?Verifica se o Bloqueio de Enderecamento do WMS deve ser efetuado       ?
//?????????????????????????????????????
For nX := 1 To Len(aSaldos)
	//?????????????????????????????????????
	//?Efetua a Gravacao do SC9                                               ?
	//?????????????????????????????????????
	If lAtualiza
		//?????????????????????????????????????
		//?arante o estoque caso haja bloqueio de credito atraves de uma reserva  ?
		//?e material.                                                            ?
		//?????????????????????????????????????
		If !lCredito .And. lResEst .And. SF4->F4_ESTOQUE=="S" .And. !lReserva .And. lEstoque
			cReserva := CriaVar("C0_NUM")
			nQtdRese := aSaldos[nX,5]
			If Empty(cReserva)
				cReserva := NextNumero("SC0",1,"C0_NUM",.T.)
			Else
				While ( GetSX8Len() > nSaveSX8 )
					ConfirmSx8()
				EndDo
			EndIf
			If !a430Reserva({1,"PD",SC5->C5_NUM,"",cFilAnt},@cReserva,;
					SC6->C6_PRODUTO,aSaldos[nX,11],nQtdRese,;
					{aSaldos[nX,2],aSaldos[nX,1],aSaldos[nX,3],aSaldos[nX,4]})
				cReserva := ""
			Else
				//????????????????????????????????
				//?Atualiza a qtde em aberto do pedido de venda                 ?
				//????????????????????????????????
				dbSelectArea("SB2")
				dbSetOrder(1)
				If ( !MsSeek(xFilial("SB2")+SC6->C6_PRODUTO+aSaldos[nX,11]) )
					CriaSB2( SC6->C6_PRODUTO,aSaldos[nX,11] )
				EndIf
				RecLock("SB2")
				SB2->B2_QPEDVEN -= nQtdRese
				SB2->B2_QPEDVE2 -= ConvUM(SB2->B2_COD, nQtdRese, 0, 2)
				//????????????????????????????????
				//?Atualiza o saldo da reserva                                  ?
				//????????????????????????????????
				dbSelectArea("SC0")
				dbSetOrder(1)
				If (xFilial("SC0")+cReserva+SC6->C6_PRODUTO+aSaldos[nX,11]==SC0->C0_FILIAL+SC0->C0_NUM+SC0->C0_PRODUTO+SC0->C0_LOCAL .Or. ;
						MsSeek(xFilial("SC0")+cReserva+SC6->C6_PRODUTO+aSaldos[nX,11]) )
					RecLock("SC0")
					SC0->C0_QUANT -= nQtdRese
					SC0->C0_TIPO  := "PD"
					SC0->C0_QTDPED += nQtdRese
				EndIf
				//????????????????????????????????
				//?Atualiza o item do pedidod de venda                          ?
				//????????????????????????????????
                CONOUT("TESTE3333333")
				RecLock("SC6")
				SC6->C6_QTDRESE += nQtdRese
				SC6->C6_RESERVA := cReserva
			EndIf
		Else
			cReserva := SC6->C6_RESERVA
			nQtdRese := SC6->C6_QTDRESE
		EndIf
		nValor := A410Arred(nQtdLib*SC6->C6_PRCVEN,"C6_PRCVEN")

		If nX == Len(aSaldos) .And. Len(aSaldos) > 1 .And. Empty(SC6->C6_LOTECTL) .And. Rastro(SC6->C6_PRODUTO)
			nPrcVen := noRound(nValor - nTotSC9,nDecimal) / aSaldos[nX,5]
			nPrcVen := A410Arred(nPrcVen,"C6_PRCVEN")
			If ( SuperGetMv("MV_ARREFAT") == "N" )
				nTotSC9Aux := nTotSC9
				nTotSC9 += a410Arred(aSaldos[nX,5] * nPrcVen ,"C9_PRCVEN")
				If nValor - nTotSC9 <> 0
					nPrcVen += a410Arred((nValor-nTotSC9)/aSaldos[nX,5] ,"C6_PRCVEN")
				EndIf
				nTotSC9 := nTotSC9Aux
			EndIf
		EndIf
		conout("Reclock SC9 LiberaPedido")
		RecLock("SC9",.T.)
		SC9->C9_FILIAL := xFilial("SC9")
		SC9->C9_PEDIDO := SC6->C6_NUM
		SC9->C9_ITEM    := SC6->C6_ITEM
		SC9->C9_SEQUEN  := cSeqSC9
		SC9->C9_PRODUTO := SC6->C6_PRODUTO
		SC9->C9_CLIENTE := SC6->C6_CLI
		SC9->C9_LOJA    := SC6->C6_LOJA
		SC9->C9_PRCVEN  := IIF(nPrcVen==0,SC6->C6_PRCVEN,nPrcVen)
		SC9->C9_DATALIB := dDataBase
		SC9->C9_LOTECTL := aSaldos[nX,1]
		SC9->C9_NUMLOTE := aSaldos[nX,2]
		SC9->C9_QTDLIB  := aSaldos[nX,5]
		SC9->C9_QTDLIB2 := aSaldos[nX,6]
		SC9->C9_DTVALID := aSaldos[nX,7]
		SC9->C9_POTENCI := aSaldos[nX,12]
		SC9->C9_BLCRED  := cBlqCred
		SC9->C9_BLEST   := cBlqEst
		SC9->C9_BLWMS   := Iif(SF4->F4_ESTOQUE == "S",cBlqWMS,"")
		SC9->C9_QTDRESE := Min(nQtdRese,SC9->C9_QTDLIB)
		SC9->C9_RESERVA := cReserva
		SC9->C9_AGREG  := &(SuperGetMv("MV_AGREG"))
		SC9->C9_GRUPO  := &(SuperGetMv("MV_GRUPFAT"))
		SC9->C9_IDENTB6:= cIdentB6
		SC9->C9_LOCAL  := aSaldos[nX,11]
		SC9->C9_SERVIC := SC6->C6_SERVIC
		SC9->C9_PROJPMS:= SC6->C6_PROJPMS
		SC9->C9_TASKPMS:= SC6->C6_TASKPMS
		SC9->C9_TRT  	 := SC6->C6_TRT
		SC9->C9_LICITA := SC6->C6_LICITA
		SC9->C9_TPCARGA:= SC5->C5_TPCARGA
		SC9->C9_ENDPAD := SC6->C6_ENDPAD
		SC9->C9_EDTPMS := SC6->C6_EDTPMS
		SC9->C9_DATENT := SC6->C6_ENTREG
		//Grava tipo da Ordem de Produ?o na libera?o
		If ( SC6->C6_TPOP == ' ' ) .Or. ( SC6->C6_TPOP == 'F' )
			SC9->C9_TPOP := '1'
		Else
			SC9->C9_TPOP := '2'
		EndIf

	   nTotSC9 += a410Arred(SC9->C9_QTDLIB * SC9->C9_PRCVEN ,"C9_PRCVEN")
		//????????????????????????????????????????????
		//?Regra do WMS, onde: 1=Apanhe por Lote/2=Apanhe por Numero de Serie/3=Apanhe por Data ?
		//????????????????????????????????????????????
		SC9->C9_REGWMS := SC6->C6_REGWMS
		//-- Executa bloco de comandos para montagem de cargas (Oms521Car)
		If ( bBlock <> Nil )
			nRecSC9 := SC9->(Recno())
			Eval(bBlock)
			SC9->(dbGoto(nRecSC9))
			If SoftLock("SC9")
				RecLock("SC9",.F.)
			EndIf
		EndIf
		If cPaisLoc == "COL" //Tratamento de Terceros em Vendas
			SC9->C9_NIT := SC6->C6_NIT
		Endif
		If cPaisLoc == "BRA"
			SC9->C9_CODISS := SC6->C6_CODISS
		EndIf	

		SB1->(dbSetOrder(1))
		SB1->(dbSeek(xFilial("SB1")+SC6->C6_PRODUTO))
		//?????????????????????????????????????
		//? campo C9_RETOPER ?considerado na quebra de Nota Fiscal.(BRASIL)      |
		//?lguns Clientes que migraram da versao 8 para 10 estao tendo problemas  |
		//?om esta quebra pois na versao 8 esse campo nao possuia um inicializador|
		//?adrao e muitos produtos estao com esse campo em branco.                |
		//?s campos em branco "" devem ser considerados como "2"=Nao. Assim qdo   |
		//|houver dois produtos ou mais onde alguns estao com os campos em branco e|
		//|e outros com "2" todos devem sair na mesma Nota Fiscal                  |
		//?????????????????????????????????????
		If cPaisLoc == "BRA"
			If !Empty(SB1->B1_RETOPER)
				SC9->C9_RETOPER := SB1->B1_RETOPER
			Else
				SC9->C9_RETOPER := "2"
			Endif
		EndIf	
	
		If ExistBlock("M440SC9I")
			ExecBlock("M440SC9I",.F.,.F.)
		EndIf
		MaAvalSC9("SC9",1,aLocaliz[nX],Nil,Nil,Nil,Nil,Nil,@nVlrCred,,,,lGeraDCF)
		//????????????????????????????????
		//?tualiza o orcamento do Televendas, se foi originado a partir?
		//?ele no modulo Call Center (SIGATMK)                         ?
		//????????????????????????????????
		TkAtuTlv(SC9->C9_PEDIDO,2)

		//???????????????????????????
		//?Integracao com o  ACD			  				  ?
		//???????????????????????????
		If lIntACD .And. FindFunction("CBMTA440C9")
			CBMTA440C9()
		//Verifica se o novo DCL est?configurado
		ElseIf SuperGetMv("MV_DCLNEW",.F.,.F.)
			DCLMTA440C()
		//????????????????????????????
		//?Ponto de entrada para todos os itens do pedido.     ?
		//????????????????????????????
		ElseIf ( ExistTemplate("MTA440C9") )
			ExecTemplate("MTA440C9",.F.,.F.)
		EndIf

		//????????????????????????????
		//?Ponto de entrada para todos os itens do pedido.     ?
		//????????????????????????????
		If ( ExistBlock("MTA440C9") )
			ExecBlock("MTA440C9",.F.,.F.)
		EndIf
	Else
		//?????????????????????????????????????
		//?cumula os dados na variavel aEmpenho                                   ?
		//?????????????????????????????????????
		If ( SF4->F4_ESTOQUE == "S" .And. aSaldos[nX,5] > 0 )
			//????????????????????????????????
			//?Atualiza qtde a ser reservada no pedido informado            ?
			//????????????????????????????????
			dbSelectArea("SB2")
			dbSetOrder(1)
			MsSeek(xFilial("SB2")+SC6->C6_PRODUTO+aSaldos[nX,11])
			RecLock("SB2")
			//?????????????????????????????????????
			//?erifica se ha bloqueio de estoque                                      ?
			//?????????????????????????????????????
			If ( lCredito .And. lEstoque )
				//?????????????????????????????????????
				//?tualiza os empenhos quando ha localizacao                              ?
				//?????????????????????????????????????
				nRegEmp := aScan(aEmpenho[2],{|x| x[1]==SB2->(RecNo()) .And.;
					x[3] == SC6->C6_LOCALIZ+SC6->C6_NUMSERI+SC6->C6_NUMLOTE+SC6->C6_LOTECTL })
				If ( nRegEmp == 0 )
					AAdd(aEmpenho[2],{ SB2->(RecNo()),aSaldos[nX,5],SC6->C6_LOCALIZ+SC6->C6_NUMSERI+SC6->C6_NUMLOTE+SC6->C6_LOTECTL,aSaldos[nX,6]})
				Else
					aEmpenho[2][nRegEmp][2] += aSaldos[nX,5]
					aEmpenho[2][nRegEmp][4] += aSaldos[nX,6]
				EndIf
			EndIf
		EndIf
		If ( SF4->F4_DUPLIC=="S" .And. !SC5->C5_TIPO$"DB" )
			dbSelectArea("SA1")
			dbSetOrder(1)
			MsSeek(xFilial("SA1")+SC6->C6_CLI+SC6->C6_LOJA)
			RecLock("SA1")
			nMCusto :=  If(SA1->A1_MOEDALC > 0,SA1->A1_MOEDALC,Val(SuperGetMv("MV_MCUSTO")))
			If ( Empty(cBlqCred) )
				nRegEmp := aScan(aEmpenho[1],{|x| x[1]==SA1->(RecNo())})
				If ( nRegEmp == 0 )
					AAdd(aEmpenho[1],{ SA1->(RecNo()),0,0})
					nRegEmp := Len(aEmpenho[1])
				EndIf
				aEmpenho[1][nRegEmp][2] += xMoeda( aSaldos[nX,5] * SC6->C6_PRCVEN , SC5->C5_MOEDA , nMCusto , dDataBase )
				aEmpenho[1][nRegEmp][3] += xMoeda( aSaldos[nX,5] * SC6->C6_PRCVEN , SC5->C5_MOEDA , nMCusto , dDataBase )
			EndIf
		EndIf
	EndIf
	//?????????????????????????????????????
	//?ncrementa o SC9                                                        ?
	//?????????????????????????????????????
	cSeqSC9 := Soma1(cSeqSC9,Len(SC9->C9_SEQUEN))
Next nX
//?????????????????????????????????????
//?estaura a entrada da rotina                                            ?
//?????????????????????????????????????
RestArea(aAreaSA1)
RestArea(aAreaSB2)
RestArea(aAreaSF4)
RestArea(aAreaSB1)
RestArea(aArea)
Return(.T.)
