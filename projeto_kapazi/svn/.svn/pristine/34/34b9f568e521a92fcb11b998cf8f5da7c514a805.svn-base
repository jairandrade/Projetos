#include "protheus.ch"
#include "rwmake.ch"
#include "font.ch"
#include "colors.ch"
#include "totvs.ch"
#Include "TOPCONN.CH"
#INCLUDE "XMLXFUN.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "FWPrintSetup.ch" 

/*-----------------------------------------------------------------------------------------------------------+
!                                           DADOS DO PROGRAMA                                                !
+---------------------+--------------------------------------------------------------------------------------+
!TIPO                 ! RELATORIO                                                                            !
+---------------------+--------------------------------------------------------------------------------------+
!MODULO               ! FATURAMENTO                                                                          !
+---------------------+--------------------------------------------------------------------------------------+
!NOME                 ! CCENFE                                                                               !
+---------------------+--------------------------------------------------------------------------------------+
!TABELAS UTILIZADAS   ! SF2 - SPED050                                                                        !
+---------------------+--------------------------------------------------------------------------------------+
!                                       DESCRIÇÃO DO FUNCIONAMENTO                                           !                                                                                      
+---------------------+--------------------------------------------------------------------------------------+
! 1 - Relatório de impressão de carta de correção eletronia CC-e                                             !
!+---------------------+-------------------------------------------------------------------------------------!
!AUTOR                !                                                                                 !
+---------------------+--------------------------------------------------------------------------------------+
!DATA DE CRIAÇÃO      !                                                                            !
+---------------------+-------------------------------------------------------------------------------------*/


//User Function FISTRFNFE()

//aadd(aRotina,{'Imprime CC-e','U_CPRTCCE' , 0 , 3,0,NIL})

//Return Nil              

/////////////////////////////////////////////
User Function CPRTCCE()
/////////////////////////////////////////////



Local   iw1,iw2,nLin
Local   xBitMap := "/system/lgrl"+cempant+cfilant+".bmp"     ///Logotipo da empresa
Local   MMEMO1  := MMEMO2 := ""
Local   xCGC    := "" 
Local   aArea   := GetArea()
Local   aAreaF1 := SF1->(GetArea())
Local   aAreaF2 := SF2->(GetArea())
Private cPerg   := "CPRNCCE   "


ValidPerg()

lRsp := Pergunte(cPerg,.T.)

If ( !lRsp )
	Return
EndIf

If(MV_PAR03 = 1)

	dbSelectArea("SF2")
	dbSetOrder(1)
	_cChave := MV_PAR01+MV_PAR02
	If(SF2->(dbSeek(xFilial("SF2")+_cChave)))

		cChvNfe  := SF2->F2_CHVNFE
		dEmissao := SF2->F2_EMISSAO

		If ( EOF() .OR. EMPTY(cChvNfe) )
			MsgStop("Atenção! Nota Fiscal não existe ou Nota Fiscal Inutilizada.")
			RestArea(aArea)
			Return
		EndIf


		If(SF2->F2_TIPO $ 'DB')
			dbSelectArea("SA2")
			dbSetOrder(1)
			dbSeek(xFilial("SA2")+SF2->F2_CLIENTE+SF2->F2_LOJA)

			xDestinatario := SA2->A2_NOME
			If ( !EMPTY(SA2->A2_CGC) )
				xCGC := IIF(LEN(SA2->A2_CGC) > 11 , TRANSF(SA2->A2_CGC,"@R 99.999.999/9999-99") , TRANSF(SA2->A2_CGC,"@R 999.999.999-99") )
			EndIf	
		Else
			dbSelectArea("SA1")
			dbSetOrder(1)
			dbSeek(xFilial("SA1")+SF2->F2_CLIENTE+SF2->F2_LOJA)

			xDestinatario := SA1->A1_NOME
			If ( !EMPTY(SA1->A1_CGC) )
				xCGC := IIF(LEN(SA1->A1_CGC) > 11 , TRANSF(SA1->A1_CGC,"@R 99.999.999/9999-99") , TRANSF(SA1->A1_CGC,"@R 999.999.999-99") )
			EndIf	
		EndIf

	Else
		msginfo('Nota de Saida nao encontrada '+mv_par01 + mv_par02,'Carta de Correção Eletronica CCE')
		Return
	EndIf

ELSE

	dbSelectArea("SF1")
	dbSetOrder(1)

	SET FILTER TO F1_FORMUL ='S'
	SF1->(DBGOTOP())
	_cChave := MV_PAR01+MV_PAR02
	If(SF1->(dbSeek(xFilial("SF1")+_cChave)))

		cChvNfe  := SF1->F1_CHVNFE
		dEmissao := SF1->F1_EMISSAO

		If ( EOF() .OR. EMPTY(cChvNfe) )
			MsgStop("Atenção! Nota Fiscal não existe ou Nota Fiscal Inutilizada.")
			RestArea(aArea)
			Return
		EndIf


		If(SF1->F1_TIPO $ 'DB')
			dbSelectArea("SA1")
			dbSetOrder(1)
			dbSeek(xFilial("SA1")+SF1->F1_FORNECE+SF1->F1_LOJA)

			xDestinatario := SA1->A1_NOME
			If ( !EMPTY(SA1->A1_CGC) )
				xCGC := IIF(LEN(SA1->A1_CGC) > 11 , TRANSF(SA1->A1_CGC,"@R 99.999.999/9999-99") , TRANSF(SA1->A1_CGC,"@R 999.999.999-99") )
			EndIf	
		Else
			dbSelectArea("SA2")
			dbSetOrder(1)
			SA2->(dbSeek(xFilial("SA2")+SF1->F1_FORNECE+SF1->F1_LOJA))

			xDestinatario := SA2->A2_NOME
			If ( !EMPTY(SA2->A2_CGC) )
				xCGC := IIF(LEN(SA2->A2_CGC) > 11 , TRANSF(SA2->A2_CGC,"@R 99.999.999/9999-99") , TRANSF(SA2->A2_CGC,"@R 999.999.999-99") )
			EndIf	
		EndIf
	Else
		msginfo('Nota de Entrada nao encontrada '+mv_par01 + mv_par02,'Carta de Correção Eletronica CCE')
		Return
	EndIf

EndIf


****************************************************************************************************************************************
Private _cTopAlias := "DBTSS"         //DEFINIÇAO DO SHEMA DE AMBIENTE ALIAS
Private _cTopDB    := "MSSQL"         //BANCO DE DADOS UTILIZADO
Private _cTopSrv   := "10.60.104.3"   //= IP DO SERVIDOR
Private _cTopSrvN  := "10.60.104.3"
Private cTopServer
Private cTopAlias
/*
cTop         := GetPvProfString("SPED","TOPALIAS",_cTopAlias,GetAdv97())
cTopData     := GetPvProfString("SPED","TOPDATABASE",_cTopDB,GetAdv97())
cTopAlias    := cTopData + "/" + cTop              
cTopServer   := GetPvProfString("SPED","TOPSERVER",_cTopSrv,GetAdv97())

TCConType("TCPIP")                                          
nCon := TCLINK(AllTrim(cTopAlias),AllTrim(cTopServer),7880)

If nCon < 0
     MsgStop("Erro conectando SPED: " + alltrim(Str(nCon)) + " - " + AllTrim(cTopAlias) + "-" + AllTrim(cTopServer))
     Return .f.
EndIf
****************************************************************************************************************************************

//TOP 1 - para pegar sempre a ultima carta de correcao da nf-e
*/

_cTopAlias := '%NFE'+FWCodEmp()+FWfilial('SF2')+'%'

BEGINSQL ALIAS "TMP"
	%NOPARSER%
	SELECT TOP 1 ID_EVENTO,TPEVENTO,SEQEVENTO,AMBIENTE,DATE_EVEN,TIME_EVEN,VERSAO,VEREVENTO,VERTPEVEN,VERAPLIC,CORGAO,CSTATEVEN,CMOTEVEN,
	PROTOCOLO,NFE_CHV,ISNULL(CONVERT(VARCHAR(2024),CONVERT(VARBINARY(2024),XML_ERP)),'') AS TMEMO1,
	ISNULL(CONVERT(VARCHAR(2024),CONVERT(VARBINARY(2024),XML_RET)),'') AS TMEMO2 
	FROM %EXP:_cTopAlias%.dbo.SPED150 (NOLOCK)
	WHERE D_E_L_E_T_ = ' ' AND STATUS = 6 
	AND NFE_CHV = %EXP:cChvNfe% 
	ORDER BY LOTE DESC
ENDSQL

/*
cQry := ChangeQuery(cQry)

dbUseArea( .T., 'TOPCONN', TCGENQRY(,,cQry), 'TMP', .T., .T.)

TcSetField("TMP","DATE_EVEN","D",08,0)

dbSelectArea("TMP")
*/
dbGoTop()

If ( EOF() )
	MsgStop("Atenção! Não existe Carta de Correção para a Nota Fiscal informada.")
	TMP->(dbCloseArea())
	RestArea(aArea)                                                    
	
	Return
EndIf
	
MMEMO1     := TMP->TMEMO1     ///Relativo ao envio
MMEMO2     := TMP->TMEMO2     ///Retorno da SEFAZ
MNFE_CHV   := TMP->NFE_CHV
MID_EVENTO := TMP->ID_EVENTO
MTPEVENTO  := STR(TMP->TPEVENTO,6)
MSEQEVENTO := STR(TMP->SEQEVENTO,1)
MAMBIENTE  := STR(TMP->AMBIENTE,1)+IIF(TMP->AMBIENTE==1," - Produção", IIF(TMP->AMBIENTE==2," - Homologação" , ""))
MDATE_EVEN := DTOC(stod(TMP->DATE_EVEN))
MTIME_EVEN := TMP->TIME_EVEN
MVERSAO    := STR(TMP->VERSAO,4,2)
MVEREVENTO := STR(TMP->VEREVENTO,4,2)
MVERTPEVEN := STR(TMP->VERTPEVEN,4,2)
MVERAPLIC  := TMP->VERAPLIC
MCORGAO    := STR(TMP->CORGAO,2)+IIF(TMP->CORGAO==13 , " - AMAZONAS",IIF(TMP->CORGAO==35 , " - SAO PAULO" , ""))
MCSTATEVEN := STR(TMP->CSTATEVEN,3)
MCMOTEVEN  := TMP->CMOTEVEN
MPROTOCOLO := STR(TMP->PROTOCOLO,15)

TMP->(dbCloseArea())

RestArea(aArea)

xFone := RTRIM(SM0->M0_TEL)
xFone := STRTRAN(xFone,"(","")
xFone := STRTRAN(xFone,")","")
xFone := STRTRAN(xFone,"-","")
xFone := STRTRAN(xFone," ","")
*
xFax := RTRIM(SM0->M0_FAX)
xFax := STRTRAN(xFax,"(","")
xFax := STRTRAN(xFax,")","")
xFax := STRTRAN(xFax,"-","")
xFax := STRTRAN(xFax," ","")
	
xRazSoc := RTRIM(SM0->M0_NOMECOM)
xEnder  := RTRIM(SM0->M0_ENDENT) + " - " + RTRIM(SM0->M0_CIDENT) + "/" + SM0->M0_ESTENT
xFone   := "Fone / Fax: " + TRANSF(xFone,"@R (99)9999-9999") + IIF(!EMPTY(SM0->M0_FAX) , " / " + TRANSF(xFax,"@R (99)9999-9999") , "" )
xCnpj   := "C.N.P.J.: " + TRANSF(SM0->M0_CGC,"@R 99.999.999/9999-99")
xIE     := "I.Estadual: "+SM0->M0_INSC

////
////Extrai dados do Memo
////
MDHEVENTO := ""
iw1 := AT("<dhRegEvento>" , MMEMO2 )
iw2 := AT("</dhRegEvento>" , MMEMO2 )
If ( iw1 > 0 )
	iw3 := ( iw2 - iw1 )
	MDHEVENTO += SUBS(MMEMO2 , ( iw1+13 ) , ( iw2 - ( iw1 + 13 ) ) )
EndIf
*
MDESCEVEN := ""
iw1 := AT("<xEvento>" , MMEMO2 )
iw2 := AT("</xEvento>" , MMEMO2 )
If ( iw1 > 0 )
	iw3 := ( iw2 - iw1 )
	MDESCEVEN += SUBS(MMEMO2 , ( iw1+9 ) , ( iw2 - ( iw1 + 9 ) ) )
EndIf
*
aCorrec   := {}
MCORRECAO := ""
iw1 := AT("<xCorrecao>" , MMEMO1 )
iw2 := AT("</xCorrecao>" , MMEMO1 )
If ( iw1 > 0 )
	iw3 := ( iw2 - iw1 )
	MCORRECAO += SUBS(MMEMO1 , ( iw1+11 ) , ( iw2 - ( iw1 + 11 ) ) ) 
	MCORRECAO += SPACE(10)
	iw1 := 1
	DO WHILE !EMPTY(SUBS(MCORRECAO,iw1,10))
		AADD(aCorrec , SUBS(MCORRECAO,iw1,105) )
		iw1 += 105     ///Nro de caracteres da linha - fica a criterio
	ENDDO
EndIf

aCondic   := {}
MCONDICAO := ""
iw1 := AT("<xCondUso>" , MMEMO1 )
iw2 := AT("</xCondUso>" , MMEMO1 )
If ( iw1 > 0 )
	AADD(aCondic , "A Carta de Correcao e disciplinada pelo paragrafo 1o-A do art. 7o do Convenio S/N, de 15 de dezembro de 1970 e pode ser utilizada para" )
	AADD(aCondic , "regularizacao  de  erro ocorrido na  emissao de  documento  fiscal, desde que o erro nao esteja relacionado com:  I - as variaveis que" )
	AADD(aCondic , "determinam o valor do imposto tais como: base de calculo, aliquota, dIferenca de preco, quantidade, valor da operacao ou da prestacao;" )
	AADD(aCondic , "II - a correcao de dados cadastrais que implique mudanca do remetente ou do destinatario; III - a data de emissao ou de saida.        " )
EndIf


// Cria um novo objeto para impressao
oPrint := TMSPrinter():New("Impressão da Carta de Correção Eletronica - CC-e")

// Cria os objetos com as configuracoes das fontes
//                                              Negrito  Subl  Italico
oFont08  := TFont():New( "Times New Roman",,08,,.f.,,,,,.f.,.f. )
oFont08b := TFont():New( "Times New Roman",,08,,.t.,,,,,.f.,.f. )
oFont09  := TFont():New( "Times New Roman",,09,,.f.,,,,,.f.,.f. )
oFont10  := TFont():New( "Times New Roman",,10,,.f.,,,,,.f.,.f. )
oFont10b := TFont():New( "Times New Roman",,10,,.t.,,,,,.f.,.f. )
oFont10b := TFont():New( "Times New Roman",,10,,.t.,,,,,.f.,.f. )
oFont11  := TFont():New( "Times New Roman",,11,,.f.,,,,,.f.,.f. )
oFont11b := TFont():New( "Times New Roman",,11,,.t.,,,,,.f.,.f. )
oFont12  := TFont():New( "Times New Roman",,12,,.f.,,,,,.f.,.f. )
oFont12b := TFont():New( "Times New Roman",,12,,.t.,,,,,.f.,.f. )
oFont13b := TFont():New( "Times New Roman",,13,,.t.,,,,,.f.,.f. )
oFont14  := TFont():New( "Times New Roman",,14,,.f.,,,,,.f.,.f. )
oFont24b := TFont():New( "Times New Roman",,24,,.t.,,,,,.f.,.f. )

// Mostra a tela de Setup
oPrint:Setup()

oPrint:SetPortrait()
oPrint:SetPaperSize(9)       ///(DMPAPER_A4)
   
// Inicia uma nova pagina
oPrint:StartPage()

oPrint:SetFont(oFont24b)
oPrint:SayBitMap(100,116,xBitMap,600,280)

oPrint:Say(120,780,xRazSoc,oFont10b ,120)
oPrint:Say(180,780,xEnder,oFont08 ,120)
oPrint:Say(230,780,xFone,oFont08 ,120)
oPrint:Say(280,780,xCnpj,oFont08 ,120)
oPrint:Say(330,780,xIE,oFont08 ,120)
*
oPrint:Box(100,1890,390,2400)

oPrint:Line(150,1890,150,2400)
oPrint:Say(104,2020,"Carta de Correção",oFont11b ,160)
oPrint:Say(171,1920,"N.Fiscal: "+mv_par02,oFont11b ,100)
oPrint:Say(241,1920,"Série:    "+mv_par01,oFont11b ,100)
oPrint:Say(310,1920,"Dt.Emissão: "+DTOC(dEmissao),oFont11b ,100)

oPrint:Box(420,100,2000,2400)

oPrint:Say(440,110,"Tipo do evento",oFont12b ,100)
oPrint:Say(440,850,"Data e hora",oFont12b ,100)
oPrint:Say(440,1890,"Protocolo",oFont12b ,100)
oPrint:Say(490,110,"Carta de Correção NFe",oFont11 ,100)
oPrint:Say(490,850,MDATE_EVEN+"  "+MTIME_EVEN,oFont11 ,140)
oPrint:Say(490,1890,MPROTOCOLO,oFont11 ,140)

oPrint:Say(580,110,"IdentIficação do destinatário",oFont11b ,200)
oPrint:Say(580,1430,"CNPJ/CPF",oFont11b ,200)
oPrint:Say(630,110,xDestinatario,oFont11b ,800)
oPrint:Say(630,1430,xCGC,oFont11b ,260)

oPrint:Say(740,110,"DADOS DO EVENTO DA CARTA DE CORREÇÃO",oFont11b ,250)
oPrint:Say(800,110,"Versão do evento",oFont11b ,100)
oPrint:Say(800,670,"Id evento",oFont11b ,100)
oPrint:Say(800,1890,"Tipo do evento",oFont11b ,100)
oPrint:Say(850,110,MVERSAO,oFont11 ,80)
oPrint:Say(850,670,MID_EVENTO,oFont11 ,400)
oPrint:Say(850,1890,MTPEVENTO,oFont11 ,120)

oPrint:Say(940,110,"IdentIficação do ambiente",oFont11b ,140)
oPrint:Say(940,670,"Código do órgão de recepção do evento",oFont11b ,240)
oPrint:Say(940,1430,"Chave de acesso da NF-e vinculada ao evento",oFont11b ,250)
oPrint:Say(990,110,MAMBIENTE,oFont11 ,80)
oPrint:Say(990,670,MCORGAO,oFont11 ,240)
oPrint:Say(990,1430,MNFE_CHV,oFont11 ,880)

oPrint:Say(1050,110,"Data e hora do recebimento do evento",oFont11b ,400)
oPrint:Say(1050,1430,"Sequencial do evento",oFont11b ,100)
oPrint:Say(1050,1890,"Versão do tipo do evento",oFont11b ,200)
oPrint:Say(1100,110,MDHEVENTO,oFont11 ,200)
oPrint:Say(1100,1430,MSEQEVENTO,oFont11 ,20)
oPrint:Say(1100,1890,MVERTPEVEN,oFont11 ,200)

oPrint:Say(1170,110,"Versão do aplicativo que",oFont11b ,100)
oPrint:Say(1210,110,"recebeu o evento",oFont11b ,100)
oPrint:Say(1170,670,"Código de status do registro do evento",oFont11b ,300)
oPrint:Say(1170,1430,"Descrição literal do status de registro do evento",oFont11b ,300)
oPrint:Say(1260,110,MVERAPLIC,oFont11 ,80)
oPrint:Say(1220,670,MCSTATEVEN,oFont11 ,60)
oPrint:Say(1220,1430,MCMOTEVEN,oFont11 ,300)

oPrint:Say(1340,110,"Descrição do evento",oFont11b ,100)
oPrint:Say(1390,110,MDESCEVEN,oFont11 ,100)

///
///Deixei um gap de 4 linhas para o texto - se o texto for maior terá que alterar a linha onde comeca a Condicao de Uso
///
oPrint:Say(1450,110,"Texto da Carta de Correção",oFont11b ,300)
nLin := 1450
FOR iw1:=1 TO LEN(aCorrec)
	 nLin += 50
	 oPrint:Say(nLin,110,aCorrec[iw1],oFont11 ,2000)
NEXT
*
oPrint:Say(1700,110,"Condições de uso",oFont11b ,100)

nLin := 1700
FOR iw2:=1 TO LEN(aCondic)
	 nLin += 50
	 oPrint:Say(nLin,110,aCondic[iw2],oFont11 ,2000)
NEXT

oPrint:EndPage()

oPrint:Preview()

restarea(aAreaF1)
restarea(aAreaF2)
restarea(aArea)

Return .F. 

/////////////////////////////////////////////////////////
Static Function ValidPerg()

Local _ni, _nj
/////////////////////////////////////////////////////////
   _sAlias := Alias()
   DbSelectArea("SX1")
   DbSetOrder(1)
   aRegs :={} //Grupo|Ordem| Pegunt         | perspa | pereng | VariaVL  | tipo| Tamanho|Decimal| Presel| GSC | Valid         |   var01   | Def01          | DefSPA1 | DefEng1 | CNT01 | var02 | Def02           | DefSPA2 | DefEng2 | CNT02 | var03 | Def03    | DefSPA3 | DefEng3 | CNT03 | var04 | Def04 | DefSPA4 | DefEng4 | CNT04 | var05 | Def05 | DefSPA5 | DefEng5 | CNT05 | F3    | GRPSX5 |
   aAdd(aRegs,{ cPerg,"02" , "Série       ?",   ""   ,  ""    , "mv_ch1" , "C" ,   03   ,   0   ,   0   , "G" , "          "  , "mv_par01", "            " , "     " , "     " , "   " , "   " , "             " , "     " , "     " , "   " , "   " , "      " , "     " , "     " , "   " , "   " , "   " , "     " , "     " , "   " , "   " , "   " , "     " , "     " , "   " , "   " , "    " })
   aAdd(aRegs,{ cPerg,"01" , "Nota Fiscal ?",   ""   ,  ""    , "mv_ch2" , "C" ,   09   ,   0   ,   0   , "G" , "          "  , "mv_par02", "            " , "     " , "     " , "   " , "   " , "             " , "     " , "     " , "   " , "   " , "      " , "     " , "     " , "   " , "   " , "   " , "     " , "     " , "   " , "   " , "   " , "     " , "     " , "   " , "   " , "    " })
   	For _ni:=1 to Len(aRegs)
			If !DbSeek(cPerg+aRegs[_ni,2])
				RecLock("SX1",.T.)
				For _nj:=1 to FCount()
					If _nj <= Len(aRegs[_ni])
						FieldPut(_nj,aRegs[_ni,_nj])
					EndIf
				Next
				MsUnlock()
			EndIf
		Next
		dbSelectArea(_sAlias)
Return
